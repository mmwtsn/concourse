// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"github.com/concourse/concourse/v7/atc/db"
)

type FakeTaskCacheLifecycle struct {
	CleanUpInvalidTaskCachesStub        func() ([]int, error)
	cleanUpInvalidTaskCachesMutex       sync.RWMutex
	cleanUpInvalidTaskCachesArgsForCall []struct {
	}
	cleanUpInvalidTaskCachesReturns struct {
		result1 []int
		result2 error
	}
	cleanUpInvalidTaskCachesReturnsOnCall map[int]struct {
		result1 []int
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeTaskCacheLifecycle) CleanUpInvalidTaskCaches() ([]int, error) {
	fake.cleanUpInvalidTaskCachesMutex.Lock()
	ret, specificReturn := fake.cleanUpInvalidTaskCachesReturnsOnCall[len(fake.cleanUpInvalidTaskCachesArgsForCall)]
	fake.cleanUpInvalidTaskCachesArgsForCall = append(fake.cleanUpInvalidTaskCachesArgsForCall, struct {
	}{})
	stub := fake.CleanUpInvalidTaskCachesStub
	fakeReturns := fake.cleanUpInvalidTaskCachesReturns
	fake.recordInvocation("CleanUpInvalidTaskCaches", []interface{}{})
	fake.cleanUpInvalidTaskCachesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeTaskCacheLifecycle) CleanUpInvalidTaskCachesCallCount() int {
	fake.cleanUpInvalidTaskCachesMutex.RLock()
	defer fake.cleanUpInvalidTaskCachesMutex.RUnlock()
	return len(fake.cleanUpInvalidTaskCachesArgsForCall)
}

func (fake *FakeTaskCacheLifecycle) CleanUpInvalidTaskCachesCalls(stub func() ([]int, error)) {
	fake.cleanUpInvalidTaskCachesMutex.Lock()
	defer fake.cleanUpInvalidTaskCachesMutex.Unlock()
	fake.CleanUpInvalidTaskCachesStub = stub
}

func (fake *FakeTaskCacheLifecycle) CleanUpInvalidTaskCachesReturns(result1 []int, result2 error) {
	fake.cleanUpInvalidTaskCachesMutex.Lock()
	defer fake.cleanUpInvalidTaskCachesMutex.Unlock()
	fake.CleanUpInvalidTaskCachesStub = nil
	fake.cleanUpInvalidTaskCachesReturns = struct {
		result1 []int
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskCacheLifecycle) CleanUpInvalidTaskCachesReturnsOnCall(i int, result1 []int, result2 error) {
	fake.cleanUpInvalidTaskCachesMutex.Lock()
	defer fake.cleanUpInvalidTaskCachesMutex.Unlock()
	fake.CleanUpInvalidTaskCachesStub = nil
	if fake.cleanUpInvalidTaskCachesReturnsOnCall == nil {
		fake.cleanUpInvalidTaskCachesReturnsOnCall = make(map[int]struct {
			result1 []int
			result2 error
		})
	}
	fake.cleanUpInvalidTaskCachesReturnsOnCall[i] = struct {
		result1 []int
		result2 error
	}{result1, result2}
}

func (fake *FakeTaskCacheLifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.cleanUpInvalidTaskCachesMutex.RLock()
	defer fake.cleanUpInvalidTaskCachesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeTaskCacheLifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.TaskCacheLifecycle = new(FakeTaskCacheLifecycle)
