// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"context"
	"sync"

	"github.com/concourse/concourse/v7/atc/db"
)

type FakePipelinePauser struct {
	PausePipelinesStub        func(context.Context, int) error
	pausePipelinesMutex       sync.RWMutex
	pausePipelinesArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	pausePipelinesReturns struct {
		result1 error
	}
	pausePipelinesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePipelinePauser) PausePipelines(arg1 context.Context, arg2 int) error {
	fake.pausePipelinesMutex.Lock()
	ret, specificReturn := fake.pausePipelinesReturnsOnCall[len(fake.pausePipelinesArgsForCall)]
	fake.pausePipelinesArgsForCall = append(fake.pausePipelinesArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.PausePipelinesStub
	fakeReturns := fake.pausePipelinesReturns
	fake.recordInvocation("PausePipelines", []interface{}{arg1, arg2})
	fake.pausePipelinesMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePipelinePauser) PausePipelinesCallCount() int {
	fake.pausePipelinesMutex.RLock()
	defer fake.pausePipelinesMutex.RUnlock()
	return len(fake.pausePipelinesArgsForCall)
}

func (fake *FakePipelinePauser) PausePipelinesCalls(stub func(context.Context, int) error) {
	fake.pausePipelinesMutex.Lock()
	defer fake.pausePipelinesMutex.Unlock()
	fake.PausePipelinesStub = stub
}

func (fake *FakePipelinePauser) PausePipelinesArgsForCall(i int) (context.Context, int) {
	fake.pausePipelinesMutex.RLock()
	defer fake.pausePipelinesMutex.RUnlock()
	argsForCall := fake.pausePipelinesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePipelinePauser) PausePipelinesReturns(result1 error) {
	fake.pausePipelinesMutex.Lock()
	defer fake.pausePipelinesMutex.Unlock()
	fake.PausePipelinesStub = nil
	fake.pausePipelinesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelinePauser) PausePipelinesReturnsOnCall(i int, result1 error) {
	fake.pausePipelinesMutex.Lock()
	defer fake.pausePipelinesMutex.Unlock()
	fake.PausePipelinesStub = nil
	if fake.pausePipelinesReturnsOnCall == nil {
		fake.pausePipelinesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.pausePipelinesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePipelinePauser) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.pausePipelinesMutex.RLock()
	defer fake.pausePipelinesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePipelinePauser) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.PipelinePauser = new(FakePipelinePauser)
