// Code generated by counterfeiter. DO NOT EDIT.
package dbfakes

import (
	"sync"

	"code.cloudfoundry.org/lager"
	"github.com/concourse/concourse/v7/atc/db"
)

type FakeCheckLifecycle struct {
	DeleteCompletedChecksStub        func(lager.Logger) error
	deleteCompletedChecksMutex       sync.RWMutex
	deleteCompletedChecksArgsForCall []struct {
		arg1 lager.Logger
	}
	deleteCompletedChecksReturns struct {
		result1 error
	}
	deleteCompletedChecksReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCheckLifecycle) DeleteCompletedChecks(arg1 lager.Logger) error {
	fake.deleteCompletedChecksMutex.Lock()
	ret, specificReturn := fake.deleteCompletedChecksReturnsOnCall[len(fake.deleteCompletedChecksArgsForCall)]
	fake.deleteCompletedChecksArgsForCall = append(fake.deleteCompletedChecksArgsForCall, struct {
		arg1 lager.Logger
	}{arg1})
	stub := fake.DeleteCompletedChecksStub
	fakeReturns := fake.deleteCompletedChecksReturns
	fake.recordInvocation("DeleteCompletedChecks", []interface{}{arg1})
	fake.deleteCompletedChecksMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCheckLifecycle) DeleteCompletedChecksCallCount() int {
	fake.deleteCompletedChecksMutex.RLock()
	defer fake.deleteCompletedChecksMutex.RUnlock()
	return len(fake.deleteCompletedChecksArgsForCall)
}

func (fake *FakeCheckLifecycle) DeleteCompletedChecksCalls(stub func(lager.Logger) error) {
	fake.deleteCompletedChecksMutex.Lock()
	defer fake.deleteCompletedChecksMutex.Unlock()
	fake.DeleteCompletedChecksStub = stub
}

func (fake *FakeCheckLifecycle) DeleteCompletedChecksArgsForCall(i int) lager.Logger {
	fake.deleteCompletedChecksMutex.RLock()
	defer fake.deleteCompletedChecksMutex.RUnlock()
	argsForCall := fake.deleteCompletedChecksArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCheckLifecycle) DeleteCompletedChecksReturns(result1 error) {
	fake.deleteCompletedChecksMutex.Lock()
	defer fake.deleteCompletedChecksMutex.Unlock()
	fake.DeleteCompletedChecksStub = nil
	fake.deleteCompletedChecksReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckLifecycle) DeleteCompletedChecksReturnsOnCall(i int, result1 error) {
	fake.deleteCompletedChecksMutex.Lock()
	defer fake.deleteCompletedChecksMutex.Unlock()
	fake.DeleteCompletedChecksStub = nil
	if fake.deleteCompletedChecksReturnsOnCall == nil {
		fake.deleteCompletedChecksReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteCompletedChecksReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCheckLifecycle) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteCompletedChecksMutex.RLock()
	defer fake.deleteCompletedChecksMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCheckLifecycle) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.CheckLifecycle = new(FakeCheckLifecycle)
